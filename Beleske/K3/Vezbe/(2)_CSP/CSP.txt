* deklaracija paralelnih procesa
		[proc1 :: impl1 || ... || procN :: implN]
* skraceni nacin za deklaraciju: [X(i:1..n) :: proc]
    - kada imamo vise procesa sa istom implementacijom
    [X(1)::proc(1) || ... || X(n) :: proc(n)]

* naredba dodele
    // dozvoljeno
    1) x := x + 1  // promenljiva x se inkrementira
    2) (x, y) := (y, x)  // x i y razmenjuju vrednosti (u pitanju su neimenovane torke)
    3) x := cons(left, right) // imenovanu torku dodeljujemo promenljivi x
    4) cons(left, right) := x  // ako je x identicna imenovana torka oblika cons(a, b), onda se vrsi dodela left := a, 
                               // right := b, a u suprotnom dolazi do greske (ako x nije odgovarajuca struktura)
    5) insert(n) := insert(2*x + 1)  // isto kao da smo uradili n := 2*x + 1; samo smo ovde upakovali promenljive u torke
    6) c := P()  // promenljivoj c se dodeljuje vrednost signala P() - signal nam sluzi uglavnom za javljanje da li je nesto
                 // gotovo i slicno

    // nije dozvoljeno
    1) insert(n) := has(n)  // ovo proizvodi gresku jer torke nemaju isto ime
    2) P() := c  // ovo proizvodi gresku jer signal ne moze da dobije vrednost

* komunikacione primitive (moguca je samo sinhrona point-to-point komunikacija, uz direktno imenovanje procesa):
    <process>!<message>
        - slanje poruke <message> procesu <process>
    <process>?<message>
        - prijem poruke <message> od procesa <process>
    * do prenosa poruke dolazi samo ako su:
        - nazivi posiljaoca i primaoca upareni
        - poruke u naredbi za slanje i primanje kompatibilne (npr. moraju da se poklapaju naziv poruke i broj i tip argumenata)
	* <message> moze biti prost ili slozen izraz

    // dozvoljeno
    1) X!m  // posalji vrednost promenljive m procesu X
    2) X?m  // primi poruku od procesa X i smesti je u promenljivu m
    3) X!(3*a + b, 13)  // posalji poruku procesu X u vidu torke sa dva elementa
    4) X?(x, y)  // primi poruku od procesa X u vidu torke sa dva elementa i dodeli odgovarajuce vrednosti promenljivama x i y
    5) console(j-1)!"A"  // posalji znak "A" procesu sa rednim brojem j-1 u nizu procesa console
    6) console(i)?c  // primi vrednost od procesa sa rednim brojem i u nizu procesa console i dodeli je promenljivoj c
    7) X(i)?V()  // primi signal V() od i-tog procesa u nizu procesa X, tj. cekaj da proces X posalje signal V() i za to vreme
                 // ne primaj druge poruke
    8) sem!P()  // posalji signal P() procesu sem

- Zasticena (guarded) komunikacija
	* kako spreciti cekanje na portovima dok postoje drugi procesi koji mogu da komuniciraju na drugim portovima
	* ovo je prakticno kao uslovni prijem poruke
	* B; C -> S;
		- B je opcioni boolean uslov
		- C je komunikacioni iskaz zasticen sa B
		- S je lista iskaza
	* ako je B == false, onda se nece cekati da pristigne poruka koja se ceka pomocu C, niti ce se izvrsiti S, vec ce se samo nastaviti dalje 
	izvrsavanje programa
	* ako je B == true, i poruka je pristigla (tj. izvrsavanje C ne izaziva blokiranje), onda ce se izvrsiti S
	* ako je B == true, i poruka nije jos pristigla, onda cemo se blokirati u C sve dok poruka ne stigne i tek tada ce se onda izvrsiti S

- kontrolne strukture
	* alternativna komanda
		[ 	
			B1, C1 -> S1;
			[] ...
			[] Bn, Cn -> Sn;
		]
		- npr. S1 se izvrsava ukoliko je uslov B1 ispunjen i poruka koja se ceka u C1 zaista moze da stigne
		- ako je vise uslova istovremeno ispunjeno, cekacemo na sve te poruke u isto vreme i koja god prva pristigne, u tu granu cemo uci, tj. to S
		ce se izvrsiti
		- ako neki proces zavrsi sa radom, svi uslovi u kojima se nalazi naredba prijema od datog procesa ne mogu biti zadovoljeni
			* logicno, tada ne mozemo da primimo poruku od tih procesa koji se vise ne izvrsavaju
	* mozemo imati i kontrolne strukture sledecih izgleda:
		[ 	
			B1 -> S1;
			[] ...
			[] Bn -> Sn;
		]
		
		[
			C1 -> S1;
			[] ...
			[] Cn -> Sn;
		]
	* repetitivna alternativna komanda (iterativna komanda)
		* [
			B1, C1 -> S1;
			[] ...
			[] Bn, Cn -> Sn;
		]
		- izvrsava se kao neka for petlja dokle god postoji neka izvrsiva alternativa
		- dokle god bilo koja od alternativa moze da se izvrsi, mi ostajemo u nasoj iterativnoj komandi
			* neka alternativa moze da se izvrsi dokle god je bilo koji od uslova B1...Bn ispunjen, i ako je u tim slucajevima gde je uslov Bi ispunjen 
			moguce da proces koji se ceka da nam posalje poruku zaista i posalje poruku - Ci, tj. prijem poruke je izvrsiv (to znaci da se taj proces 
			nalazi u delu koda iz kog moze da posalje poruku, tj. taj proces se i dalje nije zavrsio)
	* mozemo imati i iterativne komande sledecih izgleda (ovako mozemo pisati for i while petlje u CSP):
		* [ 	
			B1 -> S1;
			[] ...
			[] Bn -> Sn;
		]
		
		* [
			C1 -> S1;
			[] ...
			[] Cn -> Sn;
		]
    
    * simulacija while (true) {} petlje
        * [
            true -> [
                // telo while petlje
            ]
        ]