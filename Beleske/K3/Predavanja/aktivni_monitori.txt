- Klijent-server arhitektura - aktivni monitori
	* aktivni monitori predstavljaju simulaciju monitora iz konkurentnog programiranja koriscenjem serverskih procesa i tehnike razmene poruka
	(message passing)
	* osobine aktivnih monitora:
		- imaju jedan tok kontrole
			* kada bi imao vise tokova kontrole to bi onda bilo RPC (Remote Procedure Call), a ne aktivan monitor
		- imaju jedan ulazni kanal
			* preko njega server prima sve poruke od klijenata
	* nit aktivnog monitora ne bi smela nikada da se zablokira jer bi onda aktivan monitor potpuno prestao da radi upravo jer je to njegova
	jedina nit (nastao bi deadlock)
	* nedeljiv pristup aktivnom monitoru je garantovan samim tim sto on ima samo jedan jedini tok kontrole
	* analogije izmedju monitora sa jednom metodom iz konkurentnog programiranja i aktivnih monitora u distribuiranom programiranju:
		- stalne promenljive <=> lokalne promenljive servera
		- pozivi procedura (monitor.procedura()) <=> send request(); receive reply();
		- ulaz u monitor (entry queue) <=> receive request();
		- izlaz iz monitora <=> send reply();
		
- Aktivni monitori sa vise operacija
	* kompleksnije je jer ima vise operacija
	* razliciti su argumenti, operacije i rezultati
		- argumenti i rezultati se razlikuju po tipovima i broju parametara
	* kada je server implementiran kao aktivan monitor sa vise operacija, tada klijent pored svog identifikatora treba da posalje i koju 
	operaciju zeli da server izvrsi, kao i potrebne argumente za tu operaciju
		- klijent odgovor ocekuje na svom odredjenom reply kanalu koji je uparen sa njegovim identifikatorom
	* ovo se zove event-driven arhitektura
		- danas je ona dosta popularna zbog velike brzine
		- u takvoj arhitekturi uvek postoji neki red iz kog ciklicno izvlacimo zahteve koje treba da obavimo, odradimo sta treba pomocu argumenata
		koji su nam takodje prosledjeni i onda rezultat vratimo
		- sistemi izgradjeni na ovoj arhitekturi bi trebalo da budu dosta brzi
			* to je upravo jer nas aktivan monitor ima samo jednu nit i uopste nema blokiranja niti vec ona konstantno radi, prima zahteve, obradjuje
			koje moze, a one koje ne moze stavlja u red i obradjuje cim bude mogla
		- kod naseg aktivnog monitora postoji jedna jedina nit (tok kontrole) i ona nikada ne bi smela da se zablokira - ako bi se ona zablokirala,
		server bi potpuno prestao da radi (nastao bi deadlock) upravo jer je to jedina njegova nit
	* analogija izmedju monitora sa vise metoda iz konkurentnog programiranja i aktivnog monitora sa vise operacija iz distribuiranog programiranja:
		- identifikatori razlicitih procedura <=> tipovi operacije prosledjeni preko request kanala
		- tela procedura <=> delovi case iskaza u zavisnosti od tipa operacije koji je prosledjen
	
	type op_kind = enum(op_1, ..., op_n);
	type arg_type = union(arg_1, ..., arg_n);
	type result_type = union(res_1, ..., res_n);
	chan request(int clientId, op_kind, arg_type);
	chan reply[n] (result_type);
	
	// server implementiran kao aktivni monitor sa vise operacija
	void server() {
		int clientId;
		op_kind kind;
		arg_type args;
		result_type results;
		declaration of permanent variables;
		initialization code;
		while (true) {
			receive request(clientId, kind, args);
			switch (kind) {
				case op_1:
					body of op_1;
					break;
				...
				case op_n:
					body of op_n;
					break;
			}
			send reply[clientId] (results);
		}
	}
	
	void client(int clientId) {
		arg_type myArgs;
		result_type myResults;
		set value arguments in myArgs;
		send request(clientId, op_j, myArgs);
		receive reply[clientId] (myResults);
	}
	
- FIFO Semaphore (napravljen pomocu monitora u konkurentnom programiranju)
	* simuliran pomocu aktivnog monitora u distribuiranom programiranju

- Ovde cemo semafor napraviti preko simuliranog monitora u konkurentnom programiranju sa Signal and Wait disciplinom
	* kada se pozove signal, odmah ce biti probudjen odgovarajuci klijent i on ce odmah nastaviti svoje izvrsavanje - Signal and Wait
	
chan request(int clientId, string operationKind);
chan reply[] (dummyType);

void ServerFIFOSemaphore() {
	int s = 0;
	// simuliramo monitorsku uslovnu promenljivu pomocu reda u koji cemo samo smestati id-eve klijenata koje bismo blokirali u konkurentnom
	// programiranju (dodavanje u red blockedQueue ovde radimo umesto blokiranja na uslovnoj promenljivoj)
	queue blockedQueue;
	int clientId;
	string operationKind;
	while (true) {
		receive request(clientId, operationKind);
		switch (operationKind) {
			case "semWait":
				if (s == 0) {
					blockedQueue.put(clientId);
				} else {
					s--;
					send reply[clientId] (dummyObject);
				}
				break;
			case "semSignal":
				if (blockedQueue.size() == 0) {
					s++;
					// ovaj send reply ovde nije ni morao da se uradi jer poziv metode signal u semaforu nije blokirajuca operacija, pa to znaci da onaj
					// koji je pozvao signal uopste ni ne ceka nikakav odgovor vec je asinhrono pozvao signal i nastavio dalje sa izvrsavanjem
					send reply[clientId] (dummyObject);
				} else {
					send reply[blockedQueue.remove(0)] (dummyObject);
				}
				break;
		}
	}
}

- Ovde cemo semafor napraviti preko simuliranog monitora u konkurentnom programiranju sa Signal and Continue disciplinom
	* kada se pozove signal, klijent koji treba da se probudi nece odmah nastaviti svoje izvrsavanje, vec ce prvo biti prebacen iz reda blokiranih
	procesa u entry queue (red procesa koji cekaju da udju u monitor), pa ce tek kada dodje na red po FIFO principu on zaista biti probudjen i
	iz entry queue i nastaviti svoje izvrsavanje

chan request(int clientId, string operationKind);
chan reply[] (dummyType);

void ServerFIFOSemaphore() {
	int s = 0;
	// simuliramo monitorsku uslovnu promenljivu pomocu reda u koji cemo samo smestati id-eve klijenata koje bismo blokirali u konkurentnom
	// programiranju (dodavanje u red blockedQueue ovde radimo umesto blokiranja na uslovnoj promenljivoj)
	queue blockedQueue;
	// simuliramo entry queue pomocu ovog reda
	queue entryQueue;
	int clientId;
	string operationKind;
	while (true) {
		if (entryQueue.size() > 0) {
			send reply[entryQueue.remove(0)] (dummyObject);
			continue;
		} else {
			receive request(clientId, operationKind);
		}
		switch (operationKind) {
			case "semWait":
				if (s == 0) {
					blockedQueue.put(clientId);
				} else {
					s--;
					send reply[clientId] (dummyObject);
				}
				break;
			case "semSignal":
				if (blockedQueue.size() == 0) {
					s++;
					// ovaj send reply ovde nije ni morao da se uradi jer poziv metode signal u semaforu nije blokirajuca operacija, pa to znaci da onaj
					// koji je pozvao signal uopste ni ne ceka nikakav odgovor vec je asinhrono pozvao signal i nastavio dalje sa izvrsavanjem
					send reply[clientId] (dummyObject);
				} else {
					entryQueue.put(blockedQueue.remove(0));
				}
				break;
		}
	}
}

- analogija izmedju monitora iz konkurentnog programiranja i aktivnog monitora iz distribuiranog programiranja
	* wait iskaz <=> cuvanje zahteva koji cekaju (u red npr. kao sto smo uradili u prosla dva primera)
		- zahtevi se cuvaju u redu da bi serverska nit mogla da nastavi izvrsavanje jer ona ne sme nikada da se zablokira posto je jedina
		- pri cuvanju zahteva u nekom redu, moze biti potrebno i da se cuva i jos dodatan kontekst koji bi inace cuvao operativni sistem, ali mi ovde
		hocemo da odradimo taj posao bez operativnog sistema, pa je zato to sada nasa odgovornost
			* u taj kontekst mogu da spadaju lokalne promenljive metoda, kao i adresa na kojoj treba da se nastavi izvrsavanje nakon obrade zahteva
	* signal iskaz <=> dovhatanje i obrada zahteva koji je cekao da bude obradjen u redu (i dohvatanje konteksta ukoliko se on cuvao)
	
- kompletan rezime poredjenja monitora iz konkurentnog programiranja i aktivnog monitora iz distribuiranog programiranja
	* monitor iz konkurentnog programiranja <=> aktivni monitor iz distribuiranog programiranja
	
	* stalne promenljive <=> lokalne serverske promenljive
	* identifikatori procedura <=> tipovi operacije prosledjeni preko request kanala
	* pozivi procedura (monitor.procedura()) <=> send request(); receive reply();
	* ulaz u monitor (entry queue) <=> receive request();
	* izlaz iz monitora <=> send reply();
	* wait iskaz <=> cuvanje zahteva koji cekaju (kao i konteksta po potrebi)
	* signal iskaz <=> dovhatanje i obrada zahteva koji je cekao da bude obradjen u redu (kao i dohvatanje konteksta po potrebi)
	* tela procedura <=> delovi case iskaza u zavisnosti od tipa operacije koji je prosledjen
