- Dining philosophers - logika
	
	void philosopher(int id) {  // id = 0..4
		while (true) {
			think();
			acquireForks();
			eat();
			releaseForks();
		}
	}
	
- Dining philosophers - resenje 1 (deadlock moguc)
	* resenje u kome moze da dodje do deadlock-a
	* najgori slucaj u kome se svi filozofi ispreplicu:
		- npr. svaki filozof uzme levu viljusku i pre nego sto pokusa da uzme desnu, naredni susedni
		filozof ga pretekne tako sto i on uzme svoju levu viljusku i tako se onda svi blokiraju i niko ne
		moze da jede
		
	Semaphore forks[5] = {Semaphore(1)};
	void philosopher(int id) {  // id = 0..4
		while (true) {
			think();
			forks[id].wait();
			forks[(id + 1) % 5].wait();
			eat();
			forks[id].signal();
			forks[(id + 1) % 5].signal();
		}
	}
	
- Dining philosophers - resenje 2 (deadlock ne moze da se dogodi)
	* resen problem mrtve blokade tako sto ce prva 4 filozofa traziti prvo levu pa desnu viljusku, dok
	ce peti filozof da trazi prvo desnu pa levu viljusku - otklonjena kruzna zavisnost izmedju resursa
	* najgori slucaj ako se svi filozofi ispreplicu (1 filozof ce moci da jede i u ovom najgorem slucaju):
		- prva 4 filozofa uzmu leve viljuske, filozofi (id = 0, 1, 2) ce se blokirati, filozof (id = 4) ce se
		takodje blokirati, ali zato sto ce prvo probati da uzme svoju desnu viljusku, a to je vec leva 
		viljuska filozofa (id = 0) koju je on uzeo, tako da ce onda ostati neblokiran filozof (id = 3) i moci 
		ce da jede jer ce mu biti slobodna desna viljuska, a levu je vec uzeo
		
	Semaphore forks[5] = {Semaphore(1)};
	void philosopher(int id) {  // id = 0..3
		while (true) {
			think();
			forks[id].wait();
			forks[id + 1].wait();
			eat();
			forks[id].signal();
			forks[id + 1].signal();
		}
	}

	void philosopher(int id) {  // id = 4
		while (true) {
			think();
			forks[0].wait();
			forks[4].wait();
			eat();
			forks[0].signal();
			forks[4].signal();
		}
	}

- Dining philosophers - resenje 3 (deadlock ne moze da se dogodi i konkurentnost je maksimalna)
	* i u ovom resenju nema mrtve blokade (deadlock-a), pri cemu je program konkurentniji nego prosli
	* filozofi (i = 0) i (i = 1) se prvo takmice za viljusku (fork[1]), a filozofi (i = 2) i (i = 3) se prvo 
	takmice za viljusku (fork[3])
		- zbog ovoga je u ovom resenju veca konkurentnost programa, a obrazlozenje je sledece:
		filozofi (i = 0) i (i = 1), kao i filozofi (i = 2) i (i = 3) su medjusobno susedi, i oni svakako ne mogu
		nikada istovremeno da jedu, pa je najbolje da se oni prvo medjusobno takmice za viljuske koje
		su izmedju njih jer ce se onda onaj sused koji izgubi u tom takmicenju blokirati i pritom nece
		bezveze drzati kod sebe nijednu viljusku, sto je odlicno jer se tako smanjuje pojava drzanja 
		resursa dok se ceka drugi resurs (Hold and Wait), i upravo to povecava konkurentnost programa,
		dakle u ovom resenju su mnogo vece sanse da dva filozofa jedu istovremeno nego u proslom
	* pogledati graf resursa na slajdu 97 (prezentacija Konkurentno programiranje.pdf)
	* kada se pogleda graf resursa, sto su kraci putevi koji se mogu pratiti pomocu strelica izmedju
	resursa, to je program konkurentniji (logicno, jer je bolje da se sto manje mogu ulancati situacije
	Hold and Wait-a)
		- npr. u ovom resenju, najduzi put koji se moze ispratiti je duzine jednog resursa, a u proslom
		resenju je duzine cak 5 resursa
		
	Semaphore forks[5] = {Semaphore(1)};
	void philosopher(int id) {  // id = 0, 2, 4
		while (true) {
			think();
			forks[(id + 1) % 5].wait();
			forks[id].wait();
			eat();
			forks[(id + 1) % 5].signal()
			forks[id].signal();
		}
	}

	void philosopher(int id) {  // id = 1, 3
		while (true) {
			think();
			forks[id].wait();
			forks[id + 1].wait();
			eat();
			forks[id].signal();
			forks[id + 1].signal();
		}
	}