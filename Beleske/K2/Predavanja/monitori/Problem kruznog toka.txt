- Problem kruznog toka
	* Raskrsnica kruznog toka ima 3 dvosmerne ulice sa po jednom saobracajnom trakom u svakom smeru povezane na kruzni tok. Prednost u
	kruznom toku imaju vozila koja se vec nalaze u kruznom toku. Treba realizovati monitor u kome ce se regulisati saobracaj kruznog toka.
	Smatra se da, ako u prethodnom segmentu kruznog toka ima vozila, mora da se ceka na ulazu u kruzni tok. Takodje, vozila moraju da cekaju
	vozila ispred sebe na ulaznoj ulici u kruzni tok (u jednoj saobracajnoj traci). Kruzni tok ima 3 segmenta (po jedan izmedju svake dve ulice
	koje su povezane na kruzni tok).
	* nemamo pojma koliko dugo ce se vozila zadrzati u kruznom toku, tako da kretanje vozila nikako ne smemo stavljati u nas monitor jer je tod
	radnja koja traje neodredjeno dugo
	* nas monitor samo treba da obezbedi sinhronizaciju izmedju vozila koja ulaze u kruzni tok, izlaze iz kruznog toka i vozila koja prelaze iz
	jednog segmenta kruznog toka u drugi
	
	* da bi vozilo uslo u kruzni tok, mora da ne bude niko ispred njega u ulici koja je povezana na kruzni tok i da nema vozila u segmentu kruznog
	toka koji je levo od te ulice
	* vozilo uvek moze da izadje iz kruznog toka, tu nemamo ogranicenje
	* vozilo uvek moze da predje u naredni segment kruznog toka, ni tu nemamo ogranicenje (jer vozila u kruznom toku imaju prednost)
	
	* izgladnjivanje vozila koja ulaze u kruzni tok nastaje samo u slucaju ako vozila sto su u kruznom toku nikada ne izlaze iz njega
		- smatramo da to nije slucaj
		
	* koristicemo monitor sa disciplinom Signal and Wait u kom su obezbedjene uslovne promenljive sa FIFO redosledom
		- tako je obezbedjen FIFO na ulazu u kruzni tok
	* resenje sa monitorom sa disciplinom Signal and Continue je kompleksnije, pa zato biramo Signal and Wait (ako mozemo da biramo)
		
monitor Kruzni_Tok {
	const int N = 3;  // broj segmenata kruznog toka, a u isto vreme i broj ulaza u kruzni tok
	int count[N] = {0};  // brojac vozila u svakom segmentu kruznog toka
	condition enter[N];  // uslovne promenljive za ulaz u kruzni tok (za svaki ulaz po jedna)
	
	// ulaz u kruzni tok
	void start(int segment) {
		// ako ima vozila ispred koji cekaju u ulici koja je povezana na kruzni tok ili ako ima vozila u segmentu kruznog toka levo od naseg ulaza,
		// nase vozilo se blokira i ceka u ulici povezanoj na kruzni tok
		if (enter[segment].queue() || count[segment] != 0) {
			enter[segment].wait();
		}
		// nase vozilo ulazi u kruzni tok i ide u segment kruznog toka desno od nase ulice koja je povezana na kruzni tok
		count[segment % N + 1]++; 
	}
	
	// izlaz iz kruznog toka
	void leave(int segment) {
		// vozilo uvek moze da izadje iz kruznog toka
		count[segment]--;
		// dokle god ima vozila koji cekaju da udju u kruzni tok desno od segmenta iz kog je vozilo upravo izaslo iz kruznog toka i dokle god
		// je taj segment kruznog toka prazan (bez ijednog vozila), dopustamo ulazak novih vozila u kruzni tok i oni ce ulaziti ne u ovaj 
		// prazan segment, vec u segment desno od tog;
		
		// bitno da se u petlji proverava stalno i uslov count[segment] == 0 jer kada se pozove signal, proces napusta monitor i odmah ga prepusta
		// probudjenom procesu i ne znamo kada ce se opet vratiti u monitor, tako da je moguce da se u medjuvremenu i promeni vrednost
		// count[segment]
		while (enter[segment].queue() && count[segment] == 0) {
			enter[segment].signal();
		}
	}
	
	void moveFrom(int segment) {
		// prelazak u naredni segment
		count[segment % N + 1]++;
		// napustanje tekuceg segmenta - pozivamo funkciju iznad gde smo to vec implementirali
		leave(segment);
	}
}