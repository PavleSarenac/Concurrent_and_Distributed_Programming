package rs.ac.bg.etf.kdp.sanja.guiSwingWorker;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

import rs.ac.bg.etf.kdp.sanja.viseelementniBafer.AtomicBroadcastBuffer;
import rs.ac.bg.etf.kdp.sanja.viseelementniBafer.Message;

@SuppressWarnings("serial")
public class Get extends JFrame {

	JButton jb;
	JTextArea jta;

	public Get(AtomicBroadcastBuffer<Message<String>> buffer, int id) {
		super("Get");
		jb = new JButton("Get");
		jta = new JTextArea();

		jta.setEditable(false);

		jb.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// Ovo odradjuje gui nit.
				jb.setEnabled(false);

				// Klasa SwingWorker nam sluzi da nam omoguci koriscenje njegovog pool-a niti
				// koje ce da rade posao
				// u pozadini dok se izvrsava gui nit regularno.
				SwingWorker<Message<String>, Void> sw = new SwingWorker<Message<String>, Void>() {

					@Override
					protected Message<String> doInBackground() throws Exception {
						Message<String> item = buffer.get(id);
						return item;
					}
					
				};

			}
		});

		this.setVisible(true);
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.setLayout(new GridLayout(2, 1));
		this.setBounds(600, 200, 300, 300);
		this.add(jb);
		this.add(jta);
	}

}
